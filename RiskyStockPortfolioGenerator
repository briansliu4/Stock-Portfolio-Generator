{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import display, Math, Latex\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import numpy_financial as npf\n",
    "import yfinance as yf\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reads the Tickers.csv file, and outputs a dataframe of all tickers. \n",
    "tickers = pd.read_csv(\"Tickers.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating an empty list, where the ticker names will be stored. \n",
    "tickers_lst = []\n",
    "\n",
    "# A for loop to append all tickers from the DataFrame into a list\n",
    "for i in range(len(tickers)):\n",
    "    tickers_lst.append(tickers.iloc[i][0])\n",
    "\n",
    "# One last ticker remaining in the column header, so also append that to the list \n",
    "tickers_lst.append(tickers.columns.values[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- AUST: No data found, symbol may be delisted\n",
      "- INVALIDTIC: No data found, symbol may be delisted\n",
      "- CELG: No data found, symbol may be delisted\n"
     ]
    }
   ],
   "source": [
    "# Create an empty list where valid tickers will be stored \n",
    "valid_tickers = []\n",
    "# For loop to check if each ticker is valid according to instructions, if true then append to the list \n",
    "for each_ticker in tickers_lst:\n",
    "    stock = yf.Ticker(each_ticker)\n",
    "    avg_volume= stock.history(start=\"2021-07-02\", end = \"2021-10-21\").Volume.mean()\n",
    "    if avg_volume >= 10000 and stock.info['market'] == 'us_market':\n",
    "        valid_tickers.append(each_ticker)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Variables for start dates and end dates to get the history of the valid tickers \n",
    "start_date='2018-11-20' \n",
    "end_date=\"2021-11-20\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creates a dictionary with the tickers as keys and their closing prices as values\n",
    "ticker_hist_dict = {}\n",
    "for each_ticker in valid_tickers:\n",
    "    ticker = yf.Ticker(each_ticker)\n",
    "    close = ticker.history(start=start_date, end=end_date).Close\n",
    "    ticker_hist_dict.update({each_ticker: close})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating an empty list that will store the tickers of our final portfolio \n",
    "portfolio = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding the the stock with maximum standard deviation as our first stock in the portfolio\n",
    "ticker_hist_df = pd.DataFrame(ticker_hist_dict)\n",
    "std = pd.DataFrame(ticker_hist_df.pct_change().std())\n",
    "std.columns = [\"Standard deviations\"]\n",
    "max_std = max(ticker_hist_df.pct_change().std())\n",
    "for index, row in std.iterrows():\n",
    "    if max_std == row[\"Standard deviations\"]:\n",
    "        portfolio.append(index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ABBV': -0.041828269085318386,\n",
       " 'LOW': -0.7381735452910863,\n",
       " 'AMZN': -0.4664694804223396,\n",
       " 'AXP': -0.4068560152527074,\n",
       " 'BAC': -0.5878208355894275,\n",
       " 'BMBL': 0.22925990443350588,\n",
       " 'BK': -0.5062377797612438,\n",
       " 'SQ': 0.6546429132215283,\n",
       " 'VZ': 0.6261536784954225,\n",
       " 'CMCSA': 0.5809182350167506,\n",
       " 'SHOP': -0.09293116244723348,\n",
       " 'COST': -0.6690192880669248,\n",
       " 'CSCO': 0.023379657554691846,\n",
       " 'CVS': -0.6697340344890758,\n",
       " 'GM': -0.50668146607828,\n",
       " 'GOOG': -0.5353764043128666,\n",
       " 'JPM': -0.47046224471188075,\n",
       " 'IBM': 0.6488351145184957,\n",
       " 'ORCL': -0.4577393255358853,\n",
       " 'OXY': -0.5398132976321177,\n",
       " 'DUOL': -0.21763014228504068,\n",
       " 'PEP': -0.6548437222457212,\n",
       " 'SLB': -0.5419086411445654,\n",
       " 'SO': 0.35852852456764644,\n",
       " 'SPG': -0.6202039449471809,\n",
       " 'PYPL': 0.6509945956279712,\n",
       " 'AAPL': -0.2811466788970365}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a dictionary that will store the correlation between all the remaining stocks\n",
    "# and the stock with the maximum standard deviation in the portfolio that was previously chosen\n",
    "ticker = yf.Ticker(portfolio[0]).history(start=start_date, end =end_date).Close\n",
    "correlation = {}\n",
    "ticker_df = pd.DataFrame(ticker)\n",
    "for each_ticker in valid_tickers: \n",
    "    if each_ticker != portfolio[0]:\n",
    "        ticker_df[each_ticker] = yf.Ticker(each_ticker).history(start=start_date, end =end_date).Close      \n",
    "        correlation.update({each_ticker:ticker_df.Close.corr(ticker_df[each_ticker])})\n",
    "correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choosing the remaining 9 stocks according to their correlation with the first stock\n",
    "for i in range(9):\n",
    "    portfolio.append(max(correlation, key=correlation.get))\n",
    "    del(correlation[max(correlation, key=correlation.get)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['HOOD', 'SQ', 'PYPL', 'IBM', 'VZ', 'CMCSA', 'SO', 'BMBL', 'CSCO', 'ABBV']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# printing out our final portfolio \n",
    "portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining function that returns a dataframe with tickers and their closing prices\n",
    "def history(list_of_tickers, start_date, end_date):\n",
    "    hist_dict = {} \n",
    "    for ticker in list_of_tickers:\n",
    "        stock = yf.Ticker(ticker)\n",
    "        hist = stock.history(start=start_date, end=end_date, interval=\"1mo\").Close\n",
    "        hist_dict.update({ticker: hist})\n",
    "\n",
    "    return pd.DataFrame(hist_dict).dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining function that caclulates number of shares based on list_of_pcts that contains the weighting of each stock in list_of_tickers\n",
    "def num_shares_pct(list_of_tickers, hist_df, list_of_pcts):\n",
    "    num_shares = []\n",
    "    i = 0\n",
    "    for ticker in list_of_tickers:\n",
    "        stock_price = hist_df.loc[:, ticker][0]\n",
    "        num_shares.append((100000*(list_of_pcts[i]/100))/(stock_price))\n",
    "        i += 1\n",
    "    return num_shares"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The weighting of each stock in our portfolio\n",
    "percentages = [35, 25, 5, 5, 5, 5, 5, 5, 5, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extracting history of the stocks in our portolio\n",
    "hist_df = history(portfolio, start_date, end_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The date we will buy our portfolio on\n",
    "buy_date = \"2021-11-26\"\n",
    "\n",
    "# Creating a list with the buying price of all the stocks in our portfolio\n",
    "buy_price = []\n",
    "for each_ticker in portfolio:\n",
    "    closing_price = yf.Ticker(each_ticker).history(start=buy_date).Close.values[0]\n",
    "    buy_price.append(closing_price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[789.7111967734822,\n",
       " 93.25922078915606,\n",
       " 17.32141597923883,\n",
       " 38.19870179436443,\n",
       " 93.09702519519216,\n",
       " 83.17368210878078,\n",
       " 77.65330977445159,\n",
       " 91.74311926605505,\n",
       " 85.79192917557879,\n",
       " 42.334249102587044]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of shares bought for each stock based on our start_date \n",
    "shares = num_shares_pct(portfolio, hist_df, percentages)\n",
    "shares"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining function that calculates the portfolio based on the num of shares of each ticker in the list_of_tickers \n",
    "def portfolio_calc(list_of_tickers, hist_df, num_shares):\n",
    "    value = {}\n",
    "    n = 0\n",
    "    for ticker in list_of_tickers:\n",
    "        value.update({ticker: hist_df[ticker]*num_shares[n]})\n",
    "        n += 1\n",
    "\n",
    "    each_stock_value = pd.DataFrame(value)\n",
    "    return pd.DataFrame({\"portfolio\": each_stock_value.sum(axis=1)})\n",
    "\n",
    "# Creating a dataframe with the portfolio value\n",
    "portfolio_df = portfolio_calc(portfolio, hist_df, shares)\n",
    "\n",
    "# Joining history of each ticker in portfolio with portfolio_df\n",
    "hist_w_portfolio= pd.concat([hist_df, portfolio_df], join='inner', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOOD</th>\n",
       "      <th>SQ</th>\n",
       "      <th>PYPL</th>\n",
       "      <th>IBM</th>\n",
       "      <th>VZ</th>\n",
       "      <th>CMCSA</th>\n",
       "      <th>SO</th>\n",
       "      <th>BMBL</th>\n",
       "      <th>CSCO</th>\n",
       "      <th>ABBV</th>\n",
       "      <th>portfolio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-08-01</th>\n",
       "      <td>44.320000</td>\n",
       "      <td>268.070007</td>\n",
       "      <td>288.660004</td>\n",
       "      <td>130.894501</td>\n",
       "      <td>53.707409</td>\n",
       "      <td>60.115170</td>\n",
       "      <td>64.388756</td>\n",
       "      <td>54.500000</td>\n",
       "      <td>58.280540</td>\n",
       "      <td>118.107681</td>\n",
       "      <td>100000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-01</th>\n",
       "      <td>42.080002</td>\n",
       "      <td>239.839996</td>\n",
       "      <td>260.209991</td>\n",
       "      <td>131.071228</td>\n",
       "      <td>52.740669</td>\n",
       "      <td>55.409382</td>\n",
       "      <td>61.321308</td>\n",
       "      <td>49.980000</td>\n",
       "      <td>53.748047</td>\n",
       "      <td>105.483330</td>\n",
       "      <td>93054.727548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-01</th>\n",
       "      <td>34.970001</td>\n",
       "      <td>254.500000</td>\n",
       "      <td>232.589996</td>\n",
       "      <td>118.023544</td>\n",
       "      <td>51.744648</td>\n",
       "      <td>50.951275</td>\n",
       "      <td>61.667641</td>\n",
       "      <td>52.520000</td>\n",
       "      <td>55.268753</td>\n",
       "      <td>112.132866</td>\n",
       "      <td>88038.604091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01</th>\n",
       "      <td>25.940001</td>\n",
       "      <td>208.330002</td>\n",
       "      <td>184.889999</td>\n",
       "      <td>115.557976</td>\n",
       "      <td>49.671547</td>\n",
       "      <td>49.733742</td>\n",
       "      <td>60.460411</td>\n",
       "      <td>34.259998</td>\n",
       "      <td>54.518742</td>\n",
       "      <td>114.096046</td>\n",
       "      <td>73636.844047</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 HOOD          SQ        PYPL         IBM         VZ  \\\n",
       "Date                                                                   \n",
       "2021-08-01  44.320000  268.070007  288.660004  130.894501  53.707409   \n",
       "2021-09-01  42.080002  239.839996  260.209991  131.071228  52.740669   \n",
       "2021-10-01  34.970001  254.500000  232.589996  118.023544  51.744648   \n",
       "2021-11-01  25.940001  208.330002  184.889999  115.557976  49.671547   \n",
       "\n",
       "                CMCSA         SO       BMBL       CSCO        ABBV  \\\n",
       "Date                                                                 \n",
       "2021-08-01  60.115170  64.388756  54.500000  58.280540  118.107681   \n",
       "2021-09-01  55.409382  61.321308  49.980000  53.748047  105.483330   \n",
       "2021-10-01  50.951275  61.667641  52.520000  55.268753  112.132866   \n",
       "2021-11-01  49.733742  60.460411  34.259998  54.518742  114.096046   \n",
       "\n",
       "                portfolio  \n",
       "Date                       \n",
       "2021-08-01  100000.000000  \n",
       "2021-09-01   93054.727548  \n",
       "2021-10-01   88038.604091  \n",
       "2021-11-01   73636.844047  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist_w_portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>portfolio</th>\n",
       "      <th>^GSPC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>portfolio</th>\n",
       "      <td>0.998489</td>\n",
       "      <td>0.312746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>^GSPC</th>\n",
       "      <td>0.312746</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           portfolio     ^GSPC\n",
       "portfolio   0.998489  0.312746\n",
       "^GSPC       0.312746  1.000000"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating Beta\n",
    "MarketIndex_hist = history([\"^GSPC\"], start_date, end_date)\n",
    "index_w_portfolio = pd.concat([portfolio_df,MarketIndex_hist], join='inner', axis=1)\n",
    "\n",
    "percent_change = index_w_portfolio.pct_change()\n",
    "percent_change.drop(index=percent_change.index[0], inplace=True)\n",
    "\n",
    "MarketVar = percent_change[\"^GSPC\"].var()\n",
    "MarketVar\n",
    "Beta = percent_change.cov()/MarketVar\n",
    "Beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "portfolio   -1.611675\n",
       "dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating sharpe ratio assuming the risk free rate of return is 0\n",
    "sharpe_ratio = portfolio_df.pct_change().mean()/portfolio_df.pct_change().std()\n",
    "sharpe_ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining function that caclulates number of shares to be bought for each stock based on the prices in list_of_prices\n",
    "def num_shares_lst(list_of_tickers, list_of_prices, list_of_pcts):\n",
    "    num_shares = []\n",
    "    i = 0\n",
    "    for ticker in list_of_tickers:\n",
    "        num_shares.append((100000*(list_of_pcts[i]/100))/(list_of_prices[i]))\n",
    "        i += 1\n",
    "    return num_shares"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[27.920000076293945,\n",
       " 212.0800018310547,\n",
       " 187.7899932861328,\n",
       " 115.80999755859375,\n",
       " 51.18333053588867,\n",
       " 50.84822463989258,\n",
       " 62.040000915527344,\n",
       " 33.83000183105469,\n",
       " 54.349735260009766,\n",
       " 115.31341552734375]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displaying the price we are going to buy the stocks at\n",
    "buy_price  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1253.5816584655913,\n",
       " 117.88004424818556,\n",
       " 26.62548686703223,\n",
       " 43.174165490075794,\n",
       " 97.68805483445641,\n",
       " 98.33185003822707,\n",
       " 80.59316451023138,\n",
       " 147.79780459279152,\n",
       " 91.99676826538237,\n",
       " 43.360089345496604]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating the number of shares bought\n",
    "buy_shares = num_shares_lst(portfolio, buy_price, percentages)\n",
    "buy_shares"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total value of the portfolio is: $100000.0\n"
     ]
    }
   ],
   "source": [
    "# Creating dictionary with FinalPortfolio data\n",
    "FinalPortfolio_dict = {\"index\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
    "                 \"Ticker\": portfolio,\n",
    "                       \"Price\": buy_price,\n",
    "                       \"Shares\": buy_shares,\n",
    "                      }\n",
    "# Creating Dataframe from FinalPortfolio_dict\n",
    "FinalPortfolio = pd.DataFrame(FinalPortfolio_dict) \n",
    "FinalPortfolio.set_index(\"index\", inplace=True)\n",
    "FinalPortfolio['Value'] = FinalPortfolio['Price']*FinalPortfolio['Shares']\n",
    "FinalPortfolio[\"Weight\"] = percentages\n",
    "print(\"The total value of the portfolio is: $\"+ str(FinalPortfolio.Value.sum(axis=0)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total weight of the portfolio is: 100%\n"
     ]
    }
   ],
   "source": [
    "print(\"The total weight of the portfolio is: \"+ str(FinalPortfolio.Weight.sum(axis=0))+\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Price</th>\n",
       "      <th>Shares</th>\n",
       "      <th>Value</th>\n",
       "      <th>Weight</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HOOD</td>\n",
       "      <td>27.920000</td>\n",
       "      <td>1253.581658</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SQ</td>\n",
       "      <td>212.080002</td>\n",
       "      <td>117.880044</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PYPL</td>\n",
       "      <td>187.789993</td>\n",
       "      <td>26.625487</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IBM</td>\n",
       "      <td>115.809998</td>\n",
       "      <td>43.174165</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>VZ</td>\n",
       "      <td>51.183331</td>\n",
       "      <td>97.688055</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CMCSA</td>\n",
       "      <td>50.848225</td>\n",
       "      <td>98.331850</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>SO</td>\n",
       "      <td>62.040001</td>\n",
       "      <td>80.593165</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BMBL</td>\n",
       "      <td>33.830002</td>\n",
       "      <td>147.797805</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CSCO</td>\n",
       "      <td>54.349735</td>\n",
       "      <td>91.996768</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>ABBV</td>\n",
       "      <td>115.313416</td>\n",
       "      <td>43.360089</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Ticker       Price       Shares    Value  Weight\n",
       "index                                                 \n",
       "1       HOOD   27.920000  1253.581658  35000.0      35\n",
       "2         SQ  212.080002   117.880044  25000.0      25\n",
       "3       PYPL  187.789993    26.625487   5000.0       5\n",
       "4        IBM  115.809998    43.174165   5000.0       5\n",
       "5         VZ   51.183331    97.688055   5000.0       5\n",
       "6      CMCSA   50.848225    98.331850   5000.0       5\n",
       "7         SO   62.040001    80.593165   5000.0       5\n",
       "8       BMBL   33.830002   147.797805   5000.0       5\n",
       "9       CSCO   54.349735    91.996768   5000.0       5\n",
       "10      ABBV  115.313416    43.360089   5000.0       5"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "FinalPortfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Shares</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HOOD</td>\n",
       "      <td>1253.581658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SQ</td>\n",
       "      <td>117.880044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PYPL</td>\n",
       "      <td>26.625487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IBM</td>\n",
       "      <td>43.174165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>VZ</td>\n",
       "      <td>97.688055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CMCSA</td>\n",
       "      <td>98.331850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>SO</td>\n",
       "      <td>80.593165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BMBL</td>\n",
       "      <td>147.797805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CSCO</td>\n",
       "      <td>91.996768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>ABBV</td>\n",
       "      <td>43.360089</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Ticker       Shares\n",
       "index                    \n",
       "1       HOOD  1253.581658\n",
       "2         SQ   117.880044\n",
       "3       PYPL    26.625487\n",
       "4        IBM    43.174165\n",
       "5         VZ    97.688055\n",
       "6      CMCSA    98.331850\n",
       "7         SO    80.593165\n",
       "8       BMBL   147.797805\n",
       "9       CSCO    91.996768\n",
       "10      ABBV    43.360089"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating dictionary with Stocks data\n",
    "Stocks_dict = {\"index\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
    "               \"Ticker\": portfolio,\n",
    "               \"Shares\": buy_shares,}  \n",
    "# Creating Dataframe from Stocks_dict \n",
    "Stocks = pd.DataFrame(Stocks_dict)\n",
    "Stocks.set_index(\"index\", inplace=True)\n",
    "Stocks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Export final dataframe to a CSV file \n",
    "Stocks.to_csv('Stocks_Group_9.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our final portfolio will only contain 10 stocks. The more diversified a portfolio is, both risk and volatility are reduced. Since our group decided to create a risky portfolio, we chose the minimum required amount of stocks because then our portfolio will be less diverse, implying it'll be more risky and volatile. \n",
    "\n",
    "We first calculate the standard deviation of each stock based on the daily percentage returns. Then, the initial stock that's chosen is based on the highest standard deviation. As we know, a high standard deviation means high volatility. That means the stock price is inpredictable and can change dramatically over a short period of time in any direction, resulting in a very risky stock. \n",
    "\n",
    "The 9 stocks with the highest positively correlated closing prices with our initial stocks were chosen as the remaining stocks to complete our portfolio. The reason for doing this is because since all of our stocks are highly correlated, most of the stocks in the portfolio are likely to move in one direction. Choosing highly correlated stocks will increase the risk of a portfolio. \n",
    "\n",
    "After choosing our 10 stocks, the weights of 35%, 25%, and 5% are assigned to the stocks with the highest volatility, second highest volatility, and the remaining 8 stocks respectively. The 35% of the total weight is assigned to the stock with the highest volatility because that stock has the greatest chance to fluctuate in price. The same logic is applied to the stock with the second highest volatility, while the remaining eight stocks have 5% weight each to equal a total weight of 100%. \n",
    "\n",
    "The resulting Beta of the portfolio should be greater than 1, implying that the portfolio is more volatile than the broader market. The Sharpe Ratio should also be very small, meaning that the overall risk of the portfolio is high with a low expected return. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "CFM101",
   "language": "python",
   "name": "cfm101"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
